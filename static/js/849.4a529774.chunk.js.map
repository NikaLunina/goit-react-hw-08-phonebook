{"version":3,"file":"static/js/849.4a529774.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/FormContact/FormContact.module.css?1304","redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","components/FormContact/FormContact.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormContact_form__Ew1Sg\",\"input\":\"FormContact_input__hXMfS\",\"label\":\"FormContact_label__MImX8\",\"button\":\"FormContact_button__LnJP1\"};","export const getContacts = state => state.contacts.items\n\nexport const getFilter = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\nimport css from './FormContact.module.css';\nimport { useDispatch , useSelector} from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\n\n\n\nexport const FormContact = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    if (name === 'name') setName(value);\n    else if (name === 'number') setNumber(value);\n  };\n\n  const  formSubmitHandler = () => {\n    let newContact = {\n      number,\n      name,\n      id: nanoid(),\n    };\n\n    const newName = contacts.find(\n      contact =>\n        contact.name.toLowerCase() === newContact.name.toLowerCase().trim()\n    );\n\n    if (newName) {\n      return alert(`${newContact.name} is already in contacts.`);\n    } else {\n      dispatch(addContact(newContact));\n      \n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    formSubmitHandler();\n    setName('');\n    setNumber('');\n  };\n\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} >\n      <label className={css.label}>\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label className={css.label}>\n        Number\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button className={css.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\",\"item\":\"ContactsList_item__6gc1x\",\"button\":\"ContactsList_button__EDc5e\"};","import css from './ContactsList.module.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <div>\n      <ul className={css.list}>\n        {filteredContacts.map(contact => (\n          <li key={contact.id} className={css.item}>\n            {contact.name}: {contact.number}\n            <button\n              className={css.button}\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"filtercontainer\":\"Filter_filtercontainer__t-IOk\",\"title\":\"Filter_title__pSkfx\",\"input\":\"Filter_input__N7T3z\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { getFilter } from 'redux/contacts/selectors';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(getFilter);\n\n  const onFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div className={css.filtercontainer}>\n      <p className={css.title}>Find Contacts by name</p>\n      <label>\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter name\"\n          onChange={onFilter}\n          value={filterValue}\n        />\n      </label>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  \n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: gray;\n  border: 10px solid rosybrown;\n  border-radius: 20px;\n`;","import { FormContact} from 'components/FormContact/FormContact';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container } from './Contacts.styled';\n\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      \n            <FormContact/>\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactsList />\n       \n    </Container>\n  );\n};\n\nexport default Contacts;"],"names":["getContacts","state","contacts","items","getFilter","filter","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","FormContact","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","evt","target","value","className","css","onSubmit","e","preventDefault","newContact","find","contact","toLowerCase","trim","alert","addContact","formSubmitHandler","type","onChange","pattern","title","required","ContactsList","filteredContacts","includes","map","onClick","deleteContact","Filter","filterValue","placeholder","setFilter","Container","styled","useEffect","fetchContacts","Helmet"],"sourceRoot":""}